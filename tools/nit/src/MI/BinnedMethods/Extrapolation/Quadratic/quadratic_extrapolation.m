function [HX, HXY, HlX, HlXY, HiX, HiXY, ChiX, HshX, HshXY] = quadratic_extrapolation_v2(X, pars)
%%% *function [HX, HXY, HlX, HlXY, HiX, HiXY, ChiX, HshX, HshXY] = quadratic_extrapolation_v2(X, pars)*
%%%
%%% ### Description
%%% Quadratic extrapolation procedure.
%%%
%%% ### Inputs:
%%% - *X*: *nDimensions x nTrials x nStimuli* array including response data.
%%% - *pars*: parameter structure to check generated by build_parameters_structure.
%%%
%%% ### Outputs:
%%% - *HX*: estimate of H(X).
%%% - *HXY*: estimate of H(X|Y).
%%% - *HlX*: estimate of H_lin(X).
%%% - *HlXY*: estimate of H_lin(X|Y).
%%% - *HiX*: estimate of H_ind(X).
%%% - *HiXY*: estimate of H_ind(X|Y).
%%% - *ChiX*: estimate of Chi(X).
%%% - *HshX*: estimate of H_shuffle(X).
%%% - *HshXY*: estimate of H_shuffle(X|Y).
%%%
% ### Further notes:
%
%   Copyright (C) 2010 Cesare Magri
%   Version: 1.0.0
%
% -------
% LICENSE
% -------
% This software is distributed free under the condition that:
% 1. it shall not be incorporated in software that is subsequently sold;
% 2. the authorship of the software shall be acknowledged and the following article shall be properly cited in any publication that uses results generated by the software:
%
%      Magri C, Whittingstall K, Singh V, Logothetis NK, Panzeri S: A
%      toolbox for the fast information analysis of multiple-site LFP, EEG
%      and spike train recordings. BMC Neuroscience 2009 10(1):81;
%
% 3.  this notice shall remain in place in each source file.
%
% ----------
% DISCLAIMER
% ----------
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Nt         = pars.Nt;
methodFunc = pars.methodFunc;

% Shuffling responses across trials (this is not done in "test mode"):
if pars.testMode
    Xsh = X;
else
    Xsh = shuffle_X_across_trials(X, Nt);
end

% All available trials:
totNt  = sum(Nt);
[HX1, HXY1, HlX1, HlXY1, HiX1, HiXY1, ChiX1, HshX1, HshXY1] =  methodFunc(Xsh, pars);

% Two partitions:

% Since Nt2 would be the same for both partitions we compute it for the
% first partition and use it to partition the second:
[X2, Nt2, totNt2] = partition_X(Xsh, Nt, 2, 1);
pars.Nt = Nt2;
[HX21, HXY21, HlX21, HlXY21, HiX21, HiXY21, ChiX21, HshX21, HshXY21] = methodFunc(X2, pars);

X2 = partition_X(Xsh, Nt, 2, 2, Nt2);
[HX22, HXY22, HlX22, HlXY22, HiX22, HiXY22, ChiX22, HshX22, HshXY22] = methodFunc(X2, pars);

% Four partitions:
[X4, Nt4, totNt4] = partition_X(Xsh, Nt, 4, 1);
pars.Nt = Nt4;
[HX41, HXY41, HlX41, HlXY41, HiX41, HiXY41, ChiX41, HshX41, HshXY41] = methodFunc(X4, pars);

X4 = partition_X(Xsh, Nt, 4, 2, Nt4);
[HX42, HXY42, HlX42, HlXY42, HiX42, HiXY42, ChiX42, HshX42, HshXY42] = methodFunc(X4, pars);

X4 = partition_X(Xsh, Nt, 4, 3, Nt4);
[HX43, HXY43, HlX43, HlXY43, HiX43, HiXY43, ChiX43, HshX43, HshXY43] = methodFunc(X4, pars);

X4 = partition_X(Xsh, Nt, 4, 4, Nt4);
[HX44, HXY44, HlX44, HlXY44, HiX44, HiXY44, ChiX44, HshX44, HshXY44] = methodFunc(X4, pars);


% ASSIGNING OUTPUTS =======================================================
% H(X)
if pars.doHX
    HX2 = (HX21 + HX22) / 2;
    HX4 = (HX41 + HX42 + HX43 + HX44) / 4;

    HX = lagrange_vec([1/totNt4 1/totNt2 1/totNt], [HX4 HX2 HX1]);
else
    HX = 0;
end


% H(X|Y)
if pars.doHXY
    HXY2 = (HXY21 + HXY22) / 2;
    HXY4 = (HXY41 + HXY42 + HXY43 + HXY44) / 4;

    HXY = lagrange_vec([1./Nt4 1./Nt2 1./Nt], [HXY4 HXY2 HXY1]);
else
    HXY = 0;
end


% H(Xc)
if pars.doHlX
    HlX2 = (HlX21 + HlX22) / 2;
    HlX4 = (HlX41 + HlX42 + HlX43 + HlX44) / 4;

    HlX = lagrange_vec([1/totNt4 1/totNt2 1/totNt], [HlX4 HlX2 HlX1]);
else
    HlX = 0;
end


% H(Xc|Y)
if pars.doHlXY
    HlXY2 = (HlXY21 + HlXY22) / 2;
    HlXY4 = (HlXY41 + HlXY42 + HlXY43 + HlXY44) / 4;

    HlXY = lagrange_vec([1./Nt4 1./Nt2 1./Nt], [HlXY4 HlXY2 HlXY1]);
else
    HlXY = 0;
end


% H_ind(X)
if pars.doHiX
    HiX2 = (HiX21 + HiX22) / 2;
    HiX4 = (HiX41 + HiX42 + HiX43 + HiX44) / 4;

    HiX = lagrange_vec([1/totNt4 1/totNt2 1/totNt], [HiX4 HiX2 HiX1]);
else
    HiX = 0;
end


% H_ind(X|Y)
if pars.doHiXY
    HiXY2 = (HiXY21 + HiXY22) / 2;
    HiXY4 = (HiXY41 + HiXY42 + HiXY43 + HiXY44) / 4;

    HiXY = lagrange_vec([1./Nt4 1./Nt2 1./Nt], [HiXY4 HiXY2 HiXY1]);
else
    HiXY = 0;
end


% Chi(X)
if pars.doChiX
    ChiX2 = (ChiX21 + ChiX22) / 2;
    ChiX4 = (ChiX41 + ChiX42 + ChiX43 + ChiX44) / 4;

    ChiX = lagrange_vec([1/totNt4 1/totNt2 1/totNt], [ChiX4 ChiX2 ChiX1]);
else
    ChiX = 0;
end


% H_sh(X)
if pars.doHshX
    HshX2 = (HshX21 + HshX22) / 2;
    HshX4 = (HshX41 + HshX42 + HshX43 + HshX44) / 4;

    HshX = lagrange_vec([1/totNt4 1/totNt2 1/totNt], [HshX4 HshX2 HshX1]);
else
    HshX = 0;
end


% H_sh(X|Y)
if pars.doHshXY
    HshXY2 = (HshXY21 + HshXY22) / 2;
    HshXY4 = (HshXY41 + HshXY42 + HshXY43 + HshXY44) / 4;

    HshXY = lagrange_vec([1./Nt4 1./Nt2 1./Nt], [HshXY4 HshXY2 HshXY1]);
else
    HshXY = 0;
end


function PX = lagrange_vec(X, Y)

PX = X(:,2) .* X(:,3) ./ ((X(:,1) - X(:,2)).*(X(:,1) - X(:,3))).*Y(:,1) + ...
     X(:,1) .* X(:,3) ./ ((X(:,2) - X(:,1)).*(X(:,2) - X(:,3))).*Y(:,2) + ...
     X(:,1) .* X(:,2) ./ ((X(:,3) - X(:,1)).*(X(:,3) - X(:,2))).*Y(:,3);