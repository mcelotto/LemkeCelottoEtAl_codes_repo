function [X, nt] = buildx(Y, X_in)
%%% *function [X, nt] = buildx(Y, X_in)*
%%%
%%% ### Description
%%% Given input 2D matrix *X_in* (typically neural response) and 1D input vector *Y* (typically stimuli array), it reshapes the X matrix to a 3D shape *nDimsX X max(nTrials) X nY*.
%%%
%%% ### Inputs:
%%% - *Y*: *1 X nTrials* 1D array.
%%% - *X_in*: *nDimsX X nTrials* 2D matrix describing the response of each of the *nDimsX* dimensions for each trial.
%%%
%%% ### Outputs:
%%% - *X*: *nDims X max(nTrials) X nY* reshaped input *X_in* matrix, where *max(nTrials)* is the maximum across all the number of trials for each discrete value of Y.
%%% - *nt*: *nY X 1* array reporting the number of trials for each of the discrete values of *Y*.
%%%
%   Copyright (C) 2009 Cesare Magri
%   Version: 1.1.0
%
% -------
% LICENSE
% -------
% This software is distributed free under the condition that:
% 1. it shall not be incorporated in software that is subsequently sold;
% 2. the authorship of the software shall be acknowledged and the following article shall be properly cited in any publication that uses results generated by the software:
%
%      Magri C, Whittingstall K, Singh V, Logothetis NK, Panzeri S: A
%      toolbox for the fast information analysis of multiple-site LFP, EEG
%      and spike train recordings. BMC Neuroscience 2009 10(1):81;
%
% 3.  this notice shall remain in place in each source file.

if nargin < 2
    error("buildr.m: not enough input arguments. See `help buildr` for usage info");
end

if ~isvector(Y)
    error('Stimulus array must be a vector.');
end

if length(Y)~=size(X_in,2)
    msg = 'Each response-array must have the same length as the stimulus array';
    error('buildr:differentTotNt', msg);
end

edgVec = unique(Y);
nY = length(edgVec);
nt = zeros(nY,1);
[nt(:), binIdx] = histc(Y, edgVec);

maxNt = max(nt);
minNt = min(nt);

if minNt==0
    msg = 'One or more Y values have no corresponding X.';
    error(msg);
end

trl_lin_ind  = findtrial(nt, maxNt, nY);
[ignore, stm_linear_ind] = sort(binIdx);

L = size(X_in,1);
X = zeros(L, maxNt, nY);
X(:,trl_lin_ind) = X_in(:,stm_linear_ind);